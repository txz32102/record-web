[
    {
        "question": "1. （ ）攻击方式是利用网络协议的缺陷或者设计漏洞进行的。",
        "options": [
            "A、拒绝服务攻击",
            "B、中间人攻击",
            "C、恶意软件攻击",
            "D、社会工程学攻击"
        ],
        "correct_answer": "B"
    },
    {
        "question": "2. （）加密算法是一种对称加密算法。",
        "options": [
            "A、RSA",
            "B、DES",
            "C、ECC",
            "D、SHA"
        ],
        "correct_answer": "B"
    },
    {
        "question": "3. 国家建立和完善网络（）。",
        "options": [
            "A、网络安全标准体系",
            "B、网络安全管理体系",
            "C、网络安全防御体系",
            "D、网络安全战略体系"
        ],
        "correct_answer": "A"
    },
    {
        "question": "4. 网络运营者应当对其收集的用户信息（），并建立健全用户信息保护制度。",
        "options": [
            "A、严格保护",
            "B、严格保密",
            "C、严格保障",
            "D、严格防护"
        ],
        "correct_answer": "B"
    },
    {
        "question": "5. （）是指通过网络收集、存储、传输、处理和产生的各种电子数据。",
        "options": [
            "A、网络数据",
            "B、信息数据",
            "C、传统数据",
            "D、个人数据"
        ],
        "correct_answer": "A"
    },
    {
        "question": "6. 网络产品、服务的提供者不得设置（）；发现其网络产品、服务存在安全缺陷、漏洞等风险时，应当立即采取补救措施，按照规定及时告知用户并向有关主管部门报告。",
        "options": [
            "A、恶意代码",
            "B、恶意程序",
            "C、病毒程序",
            "D、病毒代码"
        ],
        "correct_answer": "B"
    },
    {
        "question": "7. 国家支持企业、研究机构、高等学校、（）组织参与网络安全国家标准、行业标准的指定。",
        "options": [
            "A、电信相关行业",
            "B、通信相关行业",
            "C、信息相关行业",
            "D、网络相关行业"
        ],
        "correct_answer": "D"
    },
    {
        "question": "8. 关键信息基础设施的运营者违反网络安全法第三十五条规定，使用未经安全审查或者安全审查未通过的网络产品或者服务的，由有关主管部门责令停止使用，处采购金额在（ ）罚款；对直接负责的主管人员和其他直接责任人员处一万元以上十万元一下罚款。",
        "options": [
            "A、一倍以上十倍以下",
            "B、三倍以上五倍以下",
            "C、三倍以上十倍以下",
            "D、五倍以上十倍以下"
        ],
        "correct_answer": "A"
    },
    {
        "question": "9. 通过继承取得著作权的人，不能享有的权利是（）。",
        "options": [
            "A、署名权",
            "B、使用权",
            "C、发表权",
            "D、出版权"
        ],
        "correct_answer": "A"
    },
    {
        "question": "10. 专利权的地域性是指在（）拥有法律保护。",
        "options": [
            "A、权利人所在的民族区域",
            "B、申请地所在的国家或者地区",
            "C、权利人所在国家的建交国家或地球",
            "D、权利人的国籍国或地区"
        ],
        "correct_answer": "B"
    },
    {
        "question": "11. 含有保护期限不受时间限制的知识产权的是（）。",
        "options": [
            "A、商标权",
            "B、著作权",
            "C、实用新型专利权",
            "D、发明专利权"
        ],
        "correct_answer": "B"
    },
    {
        "question": "12. 知识产权法的渊源一般分为两类，是指（）。",
        "options": [
            "A、国际条约、国际惯例",
            "B、国内法、国际法",
            "C、法律、国际条约",
            "D、法律、法规"
        ],
        "correct_answer": "B"
    },
    {
        "question": "13. 发明专利的保护期是20年，起算日期为（）。",
        "options": [
            "A、申请日",
            "B、发明完成日",
            "C、专利权生效日",
            "D、专利申请文件公开日"
        ],
        "correct_answer": "A"
    },
    {
        "question": "14. 一项发明或实用新型获得专利授权的实质条件是（）。",
        "options": [
            "A、创造性、新颖性、技术性",
            "B、新颖性、美观性、实用性",
            "C、新颖性、创造性、实用性",
            "D、创造性、合法性、新颖性"
        ],
        "correct_answer": "C"
    },
    {
        "question": "15. 软件设计包括（）两个阶段。",
        "options": [
            "A、接口设计和结构设计",
            "B、概要设计和详细设计",
            "C、数据设计和概要设计",
            "D、结构设计和过程设计"
        ],
        "correct_answer": "B"
    },
    {
        "question": "16. 概要设计的目的是确定整个系统的（）。",
        "options": [
            "A、测试方案",
            "B、规模",
            "C、费用",
            "D、功能及模块结构"
        ],
        "correct_answer": "D"
    },
    {
        "question": "17. 数据流图用于抽象描述一个软件的逻辑模型,数据流图由一些特定的图符构成。不属于数据流图合法图符的是（）。",
        "options": [
            "A、加工",
            "B、控制流",
            "C、源点和终点",
            "D、数据存储"
        ],
        "correct_answer": "B"
    },
    {
        "question": "18. 概要设计的主要成果是（）。",
        "options": [
            "A、用户的界面要求",
            "B、系统总体方案",
            "C、概要设计说明书",
            "D、用户的分析方案"
        ],
        "correct_answer": "C"
    },
    {
        "question": "19. 系统流程图是描述（）的工具。",
        "options": [
            "A、逻辑系统",
            "B、系统程序",
            "C、体系结构",
            "D、物理系统"
        ],
        "correct_answer": "D"
    },
    {
        "question": "20. 在数据库设计中，用E-R图来描述信息结构但不涉及信息在计算机中的表示，它是数据库设计的（）阶段。",
        "options": [
            "A、需求分析",
            "B、概念设计",
            "C、逻辑设计",
            "D、物理设计"
        ],
        "correct_answer": "B"
    },
    {
        "question": "21. 需求分析是分析员经了解用户的要求,认真细致地调研、分析,最终建立目标系统的逻辑模型并写出（ ）的过程。",
        "options": [
            "A、项目开发计划",
            "B、合同文档",
            "C、模块说明书",
            "D、软件规格说明"
        ],
        "correct_answer": "D"
    },
    {
        "question": "22. E-R图是数据库设计的工具之一，它适用于建立数据库的（）。",
        "options": [
            "A、概念模型",
            "B、逻辑模型",
            "C、结构模型",
            "D、物理模型"
        ],
        "correct_answer": "A"
    },
    {
        "question": "23. 螺旋模型是一种将瀑布模型和（）结合起来的软件开发模型。",
        "options": [
            "A、喷泉模型",
            "B、变换模型(原型模型)",
            "C、专家系统",
            "D、增量模型"
        ],
        "correct_answer": "B"
    },
    {
        "question": "24. 数据耦合和控制耦合相比,则（）成立。",
        "options": [
            "A、两者的耦合性相当",
            "B、控制耦合的耦合性强",
            "C、数据耦合的耦合性强",
            "D、两者的耦合性需要根据具体情况分析"
        ],
        "correct_answer": "B"
    },
    {
        "question": "25. 瀑布模型不适合用于（）的软件开发。",
        "options": [
            "A、需求模糊不清",
            "B、开发人员对业务知识不熟悉",
            "C、用户不能参与开发",
            "D、用户对计算机不了解"
        ],
        "correct_answer": "A"
    },
    {
        "question": "26. 下面不属于软件设计原则的是（）。",
        "options": [
            "A、模块化",
            "B、自底向上",
            "C、信息隐蔽",
            "D、抽象"
        ],
        "correct_answer": "B"
    },
    {
        "question": "27. 当一个模块直接使用另一个模块的内部数据时,这种模块之间的耦合为（）。",
        "options": [
            "A、标记耦合",
            "B、公共耦合",
            "C、内容耦合",
            "D、数据耦合"
        ],
        "correct_answer": "C"
    },
    {
        "question": "28. 概要设计与详细设计衔接的图形工具是（ ）。",
        "options": [
            "A、DFD图",
            "B、SC图",
            "C、程序流程图PFD",
            "D、PAD图"
        ],
        "correct_answer": "C"
    },
    {
        "question": "29. SD方法是建立良好程序结构的方法，它提出衡量模块结构质量的标准、块间联系与块内联系，SD方法的最终目标是（）。",
        "options": [
            "A、块间联系大，块内联系大",
            "B、块间联系小，块内联系大",
            "C、块间联系大，块内联系小",
            "D、块间联系小，块内联系小"
        ],
        "correct_answer": "B"
    },
    {
        "question": "30. 在SD方法中全面指导模块划分的最重要的原则是（）。",
        "options": [
            "A、程序模块化",
            "B、模块高内聚",
            "C、模块低耦合",
            "D、模块独立性"
        ],
        "correct_answer": "D"
    },
    {
        "question": "31. 结构化设计方法是一种基于模块化和自顶向下的设计原则的软件设计方法，它主要使用（ ）图形工具来表示软件结构。",
        "options": [
            "A、结构图和数据流图",
            "B、结构图和数据字典",
            "C、数据流图和数据字典",
            "D、",
            "数据流图和状态转换图"
        ],
        "correct_answer": "A"
    },
    {
        "question": "32. 结构化程序设计的一种基本方法是（）。",
        "options": [
            "A、筛选法",
            "B、递归法",
            "C、归纳法",
            "D、逐步求精法"
        ],
        "correct_answer": "D"
    },
    {
        "question": "33. 结构化分析方法（SA法）使用的主要描述工具有（）。",
        "options": [
            "A、数据库",
            "B、模块结构图",
            "C、PAD图",
            "D、分层的DFD图"
        ],
        "correct_answer": "D"
    },
    {
        "question": "34. 软件结构图的形态特征能反映程序复用率的是（）。",
        "options": [
            "A、深度",
            "B、宽度",
            "C、扇入",
            "D、扇出"
        ],
        "correct_answer": "C"
    },
    {
        "question": "35. 软件层次图（H图）中一个方形的方块代表一个（）。",
        "options": [
            "A、模块",
            "B、数据元素",
            "C、调用关系",
            "D、组成关系"
        ],
        "correct_answer": "A"
    },
    {
        "question": "36. 模块间的调用关系，用联结两模块的（ ）表示。",
        "options": [
            "A、曲线",
            "B、实心圆箭头",
            "C、直线",
            "D、空心圆箭头"
        ],
        "correct_answer": "C"
    },
    {
        "question": "37. 层次图用来描绘软件的层次结构，很适于在（）设计软件的过程中使用。",
        "options": [
            "A、从外到内",
            "B、自顶向下",
            "C、从内到外",
            "D、自底向上"
        ],
        "correct_answer": "B"
    },
    {
        "question": "38. 结构化设计是一种面向数据流的设计方法，以下不属于结构化设计工具的是（）。",
        "options": [
            "A、盒图",
            "B、HIPO图",
            "C、顺序图",
            "D、程序流程图"
        ],
        "correct_answer": "C"
    },
    {
        "question": "39. HIPO图中的H图称为（）图。",
        "options": [
            "A、高层图",
            "B、海图",
            "C、顶层图",
            "D、层次图"
        ],
        "correct_answer": "D"
    },
    {
        "question": "40. 绘制HIPO图时（ ）步骤是不正确的。",
        "options": [
            "A、用一个方块代表一个模块，模块内要标识模块号",
            "B、模块之间的调用关系用带箭头的直线表示",
            "C、采用自顶向下扩展的方法逐层分解",
            "D、在系统设计完成后开始编写HIPO图"
        ],
        "correct_answer": "D"
    },
    {
        "question": "41. 在面向对象设计中，（）是用来描述具有相同的属性和方法的对象的集合",
        "options": [
            "A、对象",
            "B、类",
            "C、继承",
            "D、封装"
        ],
        "correct_answer": "B"
    },
    {
        "question": "42. （）开发方法能够兼顾功能和数据。",
        "options": [
            "A、功能分解法",
            "B、结构化方法",
            "C、信息建模法",
            "D、面向对象方法"
        ],
        "correct_answer": "D"
    },
    {
        "question": "43. 在面向对象软件开发方法中，类与类之间主要有（）结构关系。",
        "options": [
            "A、继承和聚集",
            "B、继承和一般",
            "C、聚集和消息传递",
            "D、继承和方法调用"
        ],
        "correct_answer": "A"
    },
    {
        "question": "44. 面向对象设计中，“设计抽象的接口”的含义是（）。",
        "options": [
            "A、向用户暴露尽可能多的系统实现细节",
            "B、向用户暴露尽可能少的实现细节",
            "C、不仅仅考虑用户的业务需求，还要考虑设计约束",
            "D、让用户决定接口的定义，减少开发人员的决策负担"
        ],
        "correct_answer": "B"
    },
    {
        "question": "45. 面向对象设计的核心是使用（）来进行程序设计。",
        "options": [
            "A、对象、类、继承、封装、聚合、关联、消息、多态性等基本概念",
            "B、数据结构、算法、流程控制、函数调用等基本概念",
            "C、变量、常量、运算符、表达式等基本概念",
            "D、模块、包、命名空间、异常处理等基本概念"
        ],
        "correct_answer": "A"
    },
    {
        "question": "46. 面向对象设计方法中，开闭原则的含义是（ ）。",
        "options": [
            "A、软件实体在更改性方面应该是开放的，在扩展性方面应该是封闭的",
            "B、要尽可能多地使用接口进行封装，利用多态技术，扩展时不需修改源代码",
            "C、尽可能多定义类的继承关系，运用抽象机制",
            "D、采用契约式设计"
        ],
        "correct_answer": "B"
    },
    {
        "question": "47. 面向对象的特征中，（）是指在确定系统的某一部分内容时，应考虑到其它部分的信息及联系都在这一部分的内部进行，外部各部分之间的信息联系应尽可能的少。",
        "options": [
            "A、抽象",
            "B、继承",
            "C、封装",
            "D、多态"
        ],
        "correct_answer": "A"
    },
    {
        "question": "48. 以面向对象的特征中，（）是指不同类的对象对同一消息做出不同的响应，或者说，同一个方法在不同的对象中有不同的实现方式。",
        "options": [
            "A、抽象",
            "B、继承",
            "C、封装",
            "D、多态"
        ],
        "correct_answer": "D"
    },
    {
        "question": "49. （）是表达系统类及其相互联系的图示，它是面向对象设计的核心，建立状态图、协作图和其他图的基础。",
        "options": [
            "A、对象图",
            "B、组件图",
            "C、类图",
            "D、配置图"
        ],
        "correct_answer": "C"
    },
    {
        "question": "50. 对象实现了数据和操作的结合，使数据和操作（）于对象的统一体中。",
        "options": [
            "A、结合",
            "B、隐藏",
            "C、封装",
            "D、抽象"
        ],
        "correct_answer": "C"
    },
    {
        "question": "51. 对象的（）是对象的动态特征。",
        "options": [
            "A、特征",
            "B、属性",
            "C、关系",
            "D、操作"
        ],
        "correct_answer": "D"
    },
    {
        "question": "52. （ ）不属于面向对象分析模型。",
        "options": [
            "A、用例图",
            "B、类图",
            "C、实体关系图",
            "D、顺序图"
        ],
        "correct_answer": "C"
    },
    {
        "question": "53. 开发视图描述软件在开发环境下的（）。",
        "options": [
            "A、静态组织",
            "B、动态组织",
            "C、活动组织",
            "D、分布设计"
        ],
        "correct_answer": "A"
    },
    {
        "question": "54. 开发视图关注程序包，不仅包括要编写的（ ），还包括可以直接使用的第三方SDK和现成框架、类库，以及开发的系统将运行于其上的系统软件或中间件。",
        "options": [
            "A、框架",
            "B、源程序",
            "C、库",
            "D、包"
        ],
        "correct_answer": "B"
    },
    {
        "question": "55. 开发视图一般使用（）、类图和组件来画。",
        "options": [
            "A、序列图",
            "B、状态图",
            "C、活动图",
            "D、包图"
        ],
        "correct_answer": "D"
    },
    {
        "question": "56. 场景视图，又称“（）视图”，它综合所有的视图。",
        "options": [
            "A、用例",
            "B、活动",
            "C、并发",
            "D、静态"
        ],
        "correct_answer": "A"
    },
    {
        "question": "57. 场景表示法与组件逻辑视图非常相似，但它使用（）的连接符来表示对象之间的交互，对象实例使用实线来表达。",
        "options": [
            "A、逻辑视图",
            "B、物理视图",
            "C、进程视图",
            "D、开发视图"
        ],
        "correct_answer": "C"
    },
    {
        "question": "58. 场景视图用于刻画构件之间的（），将四个视图有机地联系起来。",
        "options": [
            "A、静态关系",
            "B、相互关系",
            "C、对应关系",
            "D、动态关系"
        ],
        "correct_answer": "B"
    },
    {
        "question": "59. 概要设计的主要任务是把需求分析得到的系统扩展用例图转换为软件结构和数据结构，建立的是目标系统的（ ）模型。",
        "options": [
            "A、逻辑",
            "B、物理",
            "C、进程",
            "D、开发"
        ],
        "correct_answer": "A"
    },
    {
        "question": "60. 为了防止软件概要设计的错误传播到开发的后续阶段，在概要设计文档完后，要进行（）。",
        "options": [
            "A、软件测试",
            "B、软件评审",
            "C、软件维护",
            "D、耦合"
        ],
        "correct_answer": "B"
    },
    {
        "question": "61. 软件概要设计阶段通常得到（）。",
        "options": [
            "A、流程图",
            "B、N-S图",
            "C、PAD图",
            "D、软件结构图"
        ],
        "correct_answer": "D"
    },
    {
        "question": "62. 软件详细设计阶段任务是（）。",
        "options": [
            "A、算法设计和数据结构",
            "B、功能设计",
            "C、调用关系设计",
            "D、输入/输出设计"
        ],
        "correct_answer": "A"
    },
    {
        "question": "63. 软件详细设计阶段属于软件生存周期的（）。",
        "options": [
            "A、需求阶段",
            "B、软件设计",
            "C、编码",
            "D、软件维护"
        ],
        "correct_answer": "B"
    },
    {
        "question": "64. 详细设计与概要设计衔接的图形工具是（）。",
        "options": [
            "A、DFD图",
            "B、程序图",
            "C、PAD图",
            "D、SC图"
        ],
        "correct_answer": "D"
    },
    {
        "question": "65. 软件详细设计阶段采用自左向右的二维图形结构描述算法的是（ ）。",
        "options": [
            "A、IPO",
            "B、JSP",
            "C、PAD",
            "D、JSD"
        ],
        "correct_answer": "C"
    },
    {
        "question": "66. 结构化程序设计主要强调的是（）。",
        "options": [
            "A、程序的规模",
            "B、程序的效率",
            "C、程序设计语言的先进性",
            "D、程序易读性"
        ],
        "correct_answer": "D"
    },
    {
        "question": "67. 详细设计的结果基本决定了最终程序的（）。",
        "options": [
            "A、代码的规模",
            "B、运行速度",
            "C、质量",
            "D、可维护性"
        ],
        "correct_answer": "C"
    },
    {
        "question": "68. 一般来说，详细设计的方法包括结构化设计方法、（）和Jackson方法。",
        "options": [
            "A、PAD图",
            "B、判定树",
            "C、面向对象设计法",
            "D、程序流程图"
        ],
        "correct_answer": "C"
    },
    {
        "question": "69. Jackson方法是以（）为基本依据的程序算法设计方法。",
        "options": [
            "A、对象",
            "B、数据结构",
            "C、数据流",
            "D、控制流"
        ],
        "correct_answer": "B"
    },
    {
        "question": "70. Jackson方法可以实现（ ）。",
        "options": [
            "A、从模块结构中导出数据结构",
            "B、从模块结构中导出程序结构",
            "C、从数据流图中导出初始的结构图",
            "D、从结构图导出程序结构"
        ],
        "correct_answer": "D"
    },
    {
        "question": "71. （ ）不是详细设计时使用的工具。",
        "options": [
            "A、系统流程图",
            "B、盒图",
            "C、PAD图",
            "D、判定树"
        ],
        "correct_answer": "A"
    },
    {
        "question": "72. 在详细设计阶段，经常采用的工具有（）。",
        "options": [
            "A、PAD",
            "B、SA",
            "C、SC",
            "D、DFD"
        ],
        "correct_answer": "A"
    },
    {
        "question": "73. （）工具在软件详细设计过程中不采用。",
        "options": [
            "A、判定表",
            "B、IPO图",
            "C、PDL",
            "D、DFD图"
        ],
        "correct_answer": "D"
    },
    {
        "question": "74. 程序流程图中的“→”代表（）。",
        "options": [
            "A、数据流",
            "B、控制流",
            "C、顺序流",
            "D、调用"
        ],
        "correct_answer": "B"
    },
    {
        "question": "75. 程序流程图中的一般包括三种基本结构，（）结构不属于其基本结构。",
        "options": [
            "A、顺序结构",
            "B、条件结构",
            "C、选择结构",
            "D、逻辑结构"
        ],
        "correct_answer": "D"
    },
    {
        "question": "76. 程序流程图中的菱形表示的是（）。",
        "options": [
            "A、变量",
            "B、调用",
            "C、逻辑条件",
            "D、加工步骤"
        ],
        "correct_answer": "C"
    },
    {
        "question": "77. （）不属于盒图的用途。",
        "options": [
            "A、最小值",
            "B、下四分位数",
            "C、平均值",
            "D、上四分位数"
        ],
        "correct_answer": "C"
    },
    {
        "question": "78. 盒图中，（ ）结构可以实现先执行后判断的循环。",
        "options": [
            "A、条件结构",
            "B、多路选择结构",
            "C、当型循环结构",
            "D、直到型循环结构构"
        ],
        "correct_answer": "D"
    },
    {
        "question": "79. （）是用作详细设计的工具。",
        "options": [
            "A、层次图",
            "B、数据流图",
            "C、模块结构图",
            "D、盒图"
        ],
        "correct_answer": "D"
    },
    {
        "question": "80. PAD图为（）提供了有力的工具",
        "options": [
            "A、自动分析数据",
            "B、测试软件",
            "C、系统分析",
            "D、软件的自动化生成"
        ],
        "correct_answer": "D"
    },
    {
        "question": "81. 在PAD图中，（）符号属于PAD图的基本符号。",
        "options": [
            "A、FOR型循环",
            "B、顺序",
            "C、DO型循环",
            "D、REPEAT型循环"
        ],
        "correct_answer": "B"
    },
    {
        "question": "82. 在PAD图中，（）符号不属于PAD图的基本符号。",
        "options": [
            "A、顺序",
            "B、选择",
            "C、CASE多分支",
            "D、FOR型循环"
        ],
        "correct_answer": "D"
    },
    {
        "question": "83. 程序流程图、N-S图和PAD图是（）使用的表达工具。",
        "options": [
            "A、设计阶段的概要设计",
            "B、设计阶段的详细设计",
            "C、编码阶段",
            "D、测试阶段"
        ],
        "correct_answer": "B"
    },
    {
        "question": "84. PAD图表示的程序结构的执行顺序是 （ ）。",
        "options": [
            "A、自最左边的竖线的上端开始，自上而下，自左向右",
            "B、",
            "自最右边的竖线的上端开始，自上而下，自右向左",
            "C、自最左边的竖线的下端开始，自下而上，自左向右",
            "D、自最右边的竖线的下端开始，自下而上，自右向左"
        ],
        "correct_answer": "A"
    },
    {
        "question": "85. 在N-S流程图中，输入/输出、数据处理、条件判断等都由（）框来表示。",
        "options": [
            "A、平行四边形",
            "B、菱形",
            "C、矩形",
            "D、正方形"
        ],
        "correct_answer": "C"
    },
    {
        "question": "86. 定表是分析和表达 （） 的工具。",
        "options": [
            "A、多逻辑条件下执行不同操作",
            "B、多输入变量下输出结果",
            "C、多条件组合下的等价类",
            "D、多条件组合下的边界"
        ],
        "correct_answer": "A"
    },
    {
        "question": "87. 判定表中贯穿条件项和动作项的一列称为 （）。",
        "options": [
            "A、规则",
            "B、简化",
            "C、组合",
            "D、逻辑"
        ],
        "correct_answer": "A"
    },
    {
        "question": "88. 判定表中用符号“-”表示 （）。",
        "options": [
            "A、无关条件",
            "B、取反条件",
            "C、缺省条件",
            "D、错误条件流"
        ],
        "correct_answer": "A"
    },
    {
        "question": "89. 判定树是用一种 （） 来表示多个条件、多个取值所应采取的动作。",
        "options": [
            "A、表格",
            "B、图形",
            "C、文字",
            "D、公式"
        ],
        "correct_answer": "B"
    },
    {
        "question": "90. 判定树中每个非终端结点包含一个 （ ），对应一次比较。",
        "options": [
            "A、条件",
            "B、动作",
            "C、规则",
            "D、结果"
        ],
        "correct_answer": "A"
    },
    {
        "question": "91. 判定树与判定表相比，其优点是 （ ）。",
        "options": [
            "A、",
            "能把所有条件组合充分地表达出来",
            "B、不需要任何的说明，一眼能够看出其中的含义",
            "C、化繁为简，能够精简、准确的输出测试用例数据",
            "D、条件的排列顺序不会也不应影响执行的操作"
        ],
        "correct_answer": "B"
    },
    {
        "question": "92. PDL（过程设计语言）是描述处理过程（）。",
        "options": [
            "A、做什么",
            "B、为什么做",
            "C、怎么做",
            "D、对谁做"
        ],
        "correct_answer": "C"
    },
    {
        "question": "93. 过程设计语言(简称PDL)，也称程序描述语言，又称为（）。",
        "options": [
            "A、编程语言",
            "B、代码",
            "C、高级语言",
            "D、伪码"
        ],
        "correct_answer": "D"
    },
    {
        "question": "94. 过程设计语言是一种用于描述软件系统的行为和结构的语言，它可以分为（ ）。",
        "options": [
            "A、图形化的过程设计语言和文本化的过程设计语言",
            "B、结构化的过程设计语言和面向对象的过程设计语言",
            "C、静态的过程设计语言和动态的过程设计语言",
            "D、通用的过程设计语言和专用的过程设计语言"
        ],
        "correct_answer": "A"
    },
    {
        "question": "95. JACKSON图中一般不包括（ ）。",
        "options": [
            "A、表头",
            "B、表体",
            "C、表名",
            "D、表尾"
        ],
        "correct_answer": "D"
    },
    {
        "question": "96. Jackson图上下层之间的关系是（）。",
        "options": [
            "A、调用关系",
            "B、组成关系",
            "C、继承关系",
            "D、嵌套关系"
        ],
        "correct_answer": "B"
    },
    {
        "question": "97. Jackson程序设计方法是一种面向（）的设计方法。",
        "options": [
            "A、数据结构",
            "B、数据流图",
            "C、IPO图",
            "D、系统流程图"
        ],
        "correct_answer": "A"
    },
    {
        "question": "98. 在流图中，用（）表示语句。",
        "options": [
            "A、菱形",
            "B、矩形",
            "C、圆",
            "D、点"
        ],
        "correct_answer": "C"
    },
    {
        "question": "99. 在流图中，用（）表示判断。",
        "options": [
            "A、菱形",
            "B、矩形",
            "C、圆",
            "D、点"
        ],
        "correct_answer": "A"
    },
    {
        "question": "100. 程序流图中箭头代表的是（）。",
        "options": [
            "A、数据流",
            "B、控制流",
            "C、调用关系",
            "D、组成关系"
        ],
        "correct_answer": "B"
    }
]