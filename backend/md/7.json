[
    {
        "question": "1. 在MySQL的GROUP BY中语句中，（）说法正确地描述了having子句和where子句的区别。",
        "options": [
            "A、having子句可以与聚合函数一起使用，而where子句不能。",
            "B、having子句可以与聚合函数一起使用，而where子句可以。",
            "C、having子句不能与聚合函数一起使用，而where子句可以。",
            "D、having子句不能与聚合函数一起使用，而where子句也不能。"
        ],
        "correct_answer": "A"
    },
    {
        "question": "2. CREATE TABLE 与（）一起使用可为新建表复制已有的表的结构。",
        "options": [
            "A、AS",
            "B、IS",
            "C、LIKE",
            "D、SELECT"
        ],
        "correct_answer": "C"
    },
    {
        "question": "3. 如果要修改数据表的某一列的默认值，需使用（）命令子句。",
        "options": [
            "A、CHANGE",
            "COLUMN",
            "B、MODIFY",
            "COLUMN",
            "C、RENAME",
            "COLUMN",
            "D、ALTER",
            "COLUMN"
        ],
        "correct_answer": "D"
    },
    {
        "question": "4. SQL集数据查询、数据操纵、数据定义和数据控制等功能为一体，语句ALTER TABLE实现（ ）类功能。",
        "options": [
            "A、数据查询",
            "B、数据操纵",
            "C、数据定义",
            "D、数据控制"
        ],
        "correct_answer": "C"
    },
    {
        "question": "5. 在MySQL中有一张表S的结构为：S（SN，CN，grade），其中SN为学生名，CN为课程名，二者均为字符型；grade为成绩，数值型，取值范围0－100。若要更正王二的化学成绩为85分，则可用（ ） 。",
        "options": [
            "A、UPDATE",
            "S",
            "SET",
            "grade＝85",
            "WHERE",
            "SN＝‘王二’",
            "AND",
            "CN＝‘化学’;",
            "B、UPDATE",
            "S",
            "SET",
            "grade＝‘85’",
            "WHERE",
            "SN＝‘王二’",
            "AND",
            "CN＝‘化学’;",
            "C、UPDATE",
            "grade＝85",
            "WHERE",
            "SN＝‘王二’",
            "AND",
            "CN＝‘化学’",
            ";",
            "D、UPDATE",
            "grade＝‘85’",
            "WHERE",
            "SN＝‘王二’",
            "AND",
            "CN＝‘化学’;"
        ],
        "correct_answer": "A"
    },
    {
        "question": "6. 在MySQL中，条件更新的作用是（）。",
        "options": [
            "A、条件更新是指根据某些条件来决定是否更新某些行或列的值",
            "B、条件更新是指根据某些条件来决定是否更新整个表的结构或数据",
            "C、条件更新是指根据某些条件来决定是否更新数据库的配置或权限",
            "D、条件更新是指根据某些条件来决定是否更新数据库的版本或引擎"
        ],
        "correct_answer": "A"
    },
    {
        "question": "7. 订单号为6的客户因某种情况退回2本书，请在Sell表中修改订购册数并在退回后，将Book表中该图书的数量增加2本，则可用（ ）。",
        "options": [
            "A、UPDATE",
            "Sell",
            "Book",
            "SET",
            "Sell.订购册数=订购册数-2,Book.数量=数量+2",
            "WHERE",
            "Sell.图书编号=Book.图书编号",
            "AND",
            "Sell.订单号='6'",
            "B、UPDATE",
            "Sell",
            "Book",
            "",
            "WHERE",
            "Sell.图书编号=Book.图书编号",
            "AND",
            "Sell.订单号='6'",
            "SET",
            "Sell.订购册数=订购册数-2,Book.数量=数量+2",
            "C、UPDATE",
            "Sell,Book",
            "",
            "WHERE",
            "Sell.图书编号=Book.图书编号",
            "AND",
            "Sell.订单号='6'",
            "SET",
            "Sell.订购册数=订购册数-2,Book.数量=数量+2",
            "D、UPDATE",
            "Sell,Book",
            "SET",
            "Sell.订购册数=订购册数-2,Book.数量=数量+2",
            "WHERE",
            "Sell.图书编号=Book.图书编号",
            "AND",
            "Sell.订单号='6'"
        ],
        "correct_answer": "D"
    },
    {
        "question": "8. 如果DELETE语句中，省略了WHRE子句，则语句执行结果会是（）。",
        "options": [
            "A、删除表中所有行",
            "B、删除指定数据表中的第一行",
            "C、不删除表中任何行",
            "D、删除指定数据表中的最后一行"
        ],
        "correct_answer": "A"
    },
    {
        "question": "9. Drop、Delete 和 Truncate都有删除表的作用，三者区别在于（）。",
        "options": [
            "A、Drop和",
            "Truncate",
            "仅删除表数据，Delete",
            "",
            "连表数据和表结构一起删除",
            "B、Delete",
            "和Drop",
            "仅删除表数据，Truncate",
            "连表数据和表结构一起删除",
            "C、Delete",
            "和",
            "Truncate",
            "仅删除表数据，Drop",
            "连表数据和表结构一起删除",
            "D、Delete",
            "、Drop和Truncat不",
            "仅删除表数据，还删除了表结构"
        ],
        "correct_answer": "C"
    },
    {
        "question": "10. 当需要删除一个表时，可以使用（）语句。",
        "options": [
            "A、DELETE",
            "TABLE",
            "B、ALTER",
            "TABLE",
            "C、DROP",
            "TABLE",
            "D、TRUNCATETABLE"
        ],
        "correct_answer": "C"
    },
    {
        "question": "11. （ ）说法能正确地描述了条件删除和无条件删除的区别。",
        "options": [
            "A、条件删除是指只删除满足某些条件的行，无条件删除是指删除所有行。",
            "B、条件删除是指只删除满足某些条件的列，无条件删除是指删除所有列。",
            "C、条件删除是指只删除满足某些条件的表，无条件删除是指删除所有表。",
            "D、条件删除是指只删除满足某些条件的数据库，无条件删除是指删除所有数据库。"
        ],
        "correct_answer": "A"
    },
    {
        "question": "12. （）说法能正确地描述了删除语句的作用。",
        "options": [
            "A、删除语句用于从表中移除已存在的行。",
            "B、删除语句用于从表中移除不存在的行。",
            "C、删除语句用于从表中移除已存在的列",
            "D、删除语句用于从表中移除不存在的列。"
        ],
        "correct_answer": "A"
    },
    {
        "question": "13. 当需要删除表中所有记录，且记录有很多条时，可以使用（）命令来快速实现。",
        "options": [
            "A、DROP",
            "B、DELETE",
            "C、TRUNCATE",
            "D、ALTER"
        ],
        "correct_answer": "C"
    },
    {
        "question": "14. 在MySQL中，（）函数可返回表中指定字段的平均值。",
        "options": [
            "A、MAX（）",
            "B、MIN（）",
            "C、AVG（）",
            "D、COUNT（）"
        ],
        "correct_answer": "C"
    },
    {
        "question": "15. 在MySQL中，（ ）函数属于比较运算函数。",
        "options": [
            "A、RAND（）",
            "B、POW（）",
            "C、CEIL（）",
            "D、IN（）"
        ],
        "correct_answer": "D"
    },
    {
        "question": "16. SELECT ROUND（3.14,3）执行的结果是（）。",
        "options": [
            "A、3.140",
            "B、3.14",
            "C、3",
            "D、4"
        ],
        "correct_answer": "A"
    },
    {
        "question": "17. 在MySQL中，（）函数能实现多个字符串连接操作。",
        "options": [
            "A、JOIN（）",
            "B、CONCAT（）",
            "C、REPLACE（）",
            "D、SUBSTRING（）"
        ],
        "correct_answer": "B"
    },
    {
        "question": "18. 在MySQL中，（）函数属于字符串处理函数。",
        "options": [
            "A、YEAR",
            "B、ABS",
            "C、RIGHT",
            "D、MIN"
        ],
        "correct_answer": "C"
    },
    {
        "question": "19. 在MySQL中，执行 SELECT UPPER(\"hello\"),LOWER(\"Hello\") FROM STU语句后，运行结果是（）。",
        "options": [
            "A、hello",
            "hello",
            "B、HELLO",
            "HELLO",
            "C、hello",
            "HELLO",
            "D、HELLO",
            "hello"
        ],
        "correct_answer": "D"
    },
    {
        "question": "20. 在MySQL常用日期函数中，（）返回当前的日期和时间。",
        "options": [
            "A、CURDATE()",
            "B、NOW()",
            "C、CURTIME()",
            "D、DATE()"
        ],
        "correct_answer": "B"
    },
    {
        "question": "21. 在MySQL中，执行（ ）SQL语句可以返回指定日期的星期几的名称。",
        "options": [
            "A、SELECT",
            "DAYNAME",
            "(‘2021-12-25’);",
            "B、SELECT",
            "WEEKDAY",
            "(‘2021-12-25’);",
            "C、SELECT",
            "DAYOFWEEK",
            "(‘2021-12-25’);",
            "D、SELECT",
            "WEEKNAME",
            "(‘2021-12-25’);"
        ],
        "correct_answer": "A"
    },
    {
        "question": "22. 执行SELECT DATEDIFF('2023-02-05','2018-05-16') AS DifferDate语句后，返回（）。",
        "options": [
            "A、'2018-05-16'",
            "B、'2023-02-05'",
            "C、'2023-02-05','2018-05-16'",
            "D、1726"
        ],
        "correct_answer": "D"
    },
    {
        "question": "23. 在MySQL中，用于创建一个带有条件判断的循环过程的语句是（）。",
        "options": [
            "A、LOOP语句",
            "B、ITERATE语句",
            "C、REPEAT语句",
            "D、QUIT语句"
        ],
        "correct_answer": "C"
    },
    {
        "question": "24. 在MySQL中，进行循环操作不具备判断功能的是（）。",
        "options": [
            "A、REPEAT语句",
            "B、CASE语句",
            "C、LOOP语句",
            "D、WHILE语句"
        ],
        "correct_answer": "C"
    },
    {
        "question": "25. 在MySQL中，执行SELECT  IF(2*4>9-5,'是','否')后，会返回（）。",
        "options": [
            "A、是",
            "B、否",
            "C、1",
            "D、0"
        ],
        "correct_answer": "A"
    },
    {
        "question": "26. 在MySQL中，对两张表进行连接查询时，其笛卡尔积的列数、行数分别是（ ）。",
        "options": [
            "A、行数是两表的列数之和、列数是两表的行数之积",
            "B、列数是两表的列数之和、行数是两表的行数之积",
            "C、行数是两表的列数之和、列数是两表的行数之和",
            "D、列数是两表的列数之积、行数是两表的行数之积"
        ],
        "correct_answer": "B"
    },
    {
        "question": "27. 在MySQL中执行（）SQL语句可以产生笛卡尔积。",
        "options": [
            "A、SELECT",
            "*",
            "FROM",
            "table1",
            "CROSS",
            "JOIN",
            "table2;",
            "B、SELECT",
            "*",
            "FROM",
            "table1",
            "INNER",
            "JOIN",
            "table2",
            "ON",
            "table1.id",
            "=",
            "table2.id;",
            "C、SELECT",
            "*",
            "FROM",
            "table1",
            "LEFT",
            "JOIN",
            "table2",
            "ON",
            "table1.id",
            "=",
            "table2.id;",
            "D、SELECT",
            "*",
            "FROM",
            "table1",
            "RIGHT",
            "JOIN",
            "table2",
            "ON",
            "table1.id",
            "=",
            "table2.id;"
        ],
        "correct_answer": "A"
    },
    {
        "question": "28. 表A中的每一个元素，都对表B中的所有元素做连接运算是（）连接。",
        "options": [
            "A、内连接",
            "B、外连接",
            "C、笛卡尔积连接",
            "D、自连接"
        ],
        "correct_answer": "C"
    },
    {
        "question": "29. 在MySQL多表查询时，指定了（）关键字的连接就是内连接。",
        "options": [
            "A、JOIN",
            "B、INNER",
            "C、OUTER",
            "D、ON"
        ],
        "correct_answer": "B"
    },
    {
        "question": "30. 在MySQL中，正确使用内连接来连接多于两张的表的语法是（ ）。",
        "options": [
            "A、在FROM子句后使用逗号分隔的表列表",
            "B、在ON子句中使用嵌套子查询",
            "C、在FROM子句中使用多个INNER",
            "JOIN子句",
            "D、",
            "在SELECT子句后使用UNION子句"
        ],
        "correct_answer": "C"
    },
    {
        "question": "31. 内连接是在FROM子句产生的中间结果中应用（）条件后，所得到的结果。",
        "options": [
            "A、USING",
            "B、ON",
            "C、JOIN",
            "D、IN"
        ],
        "correct_answer": "B"
    },
    {
        "question": "32. MySQL中使用左连接时，如果右表中没有匹配的记录，那么结果集中会显示（）。",
        "options": [
            "A、左表中的记录和右表中的默认值",
            "B、左表中的记录和右表中的NULL值",
            "C、只显示左表中的记录",
            "D、不显示任何记录"
        ],
        "correct_answer": "B"
    },
    {
        "question": "33. 在MySQL中，左外连接查询时，使用（ ）设置主表和从表连接的条件。",
        "options": [
            "A、WHERE",
            "B、ON",
            "C、USING",
            "D、HAVING"
        ],
        "correct_answer": "B"
    },
    {
        "question": "34. 在MySQL中，（）不属于连接类型。",
        "options": [
            "A、左外连接",
            "B、内连接",
            "C、中间连接",
            "D、交叉连接"
        ],
        "correct_answer": "C"
    },
    {
        "question": "35. 使用交叉连接后，每条记录中含有的字段数等于（）。",
        "options": [
            "A、CROSS",
            "JOIN左侧表的字段",
            "B、CROSS",
            "JOIN右侧表的字段",
            "C、参与交叉连接表的字段和",
            "D、参与交叉连接表的字段乘积"
        ],
        "correct_answer": "C"
    },
    {
        "question": "36. 现有三个表，TABLE 1中有10行、TABLE 2中有2行、TABLE 3中有6行，那么这三个表进行交叉连接后，结果集中共用（）行数据。",
        "options": [
            "A、20",
            "B、60",
            "C、18",
            "D、120"
        ],
        "correct_answer": "D"
    },
    {
        "question": "37. 多个表交叉连接时，在 FROM 后连续使用（）即可。",
        "options": [
            "A、INNER",
            "JOIN",
            "B、LEFT",
            "JOIN",
            "C、RIGHT",
            "JOIN",
            "D、CROSS",
            "JOIN"
        ],
        "correct_answer": "D"
    },
    {
        "question": "38. MySQL中使用自连接时，必须给表起（）。",
        "options": [
            "A、别名",
            "B、索引",
            "C、主键",
            "D、外键"
        ],
        "correct_answer": "A"
    },
    {
        "question": "39. MySQL中使用自连接时，可以使用（ ）连接类型。",
        "options": [
            "A、只能使用内连接",
            "B、只能使用外连接",
            "C、可以使用内连接或外连接",
            "D、不能使用任何连接类型"
        ],
        "correct_answer": "C"
    },
    {
        "question": "40. MySQL中使用自连接时，可以在ON子句中使用（）运算符。",
        "options": [
            "A、只能使用等于运算符",
            "(=)",
            "B、可以使用等于运算符",
            "(=)",
            "或不等于运算符",
            "(<>)",
            "C、可以使用任何比较运算符",
            "(=,",
            "<>,",
            ">,",
            "<,",
            ">=,",
            "<=)",
            "D、不能使用任何运算符"
        ],
        "correct_answer": "C"
    },
    {
        "question": "41. 条件子查询可以嵌套在（）子句中。",
        "options": [
            "A、SELECT",
            "B、FROM",
            "C、WHERE",
            "D、GROUP",
            "BY"
        ],
        "correct_answer": "C"
    },
    {
        "question": "42. （）子查询用于进行一个给定值是否在子查询结果集中的判断。",
        "options": [
            "A、EXISTS",
            "B、IN",
            "C、ALL",
            "D、WHERE"
        ],
        "correct_answer": "B"
    },
    {
        "question": "43. 条件子查询可以嵌套（）层。",
        "options": [
            "A、1层",
            "B、2层",
            "C、3层",
            "D、不限层数判断题"
        ],
        "correct_answer": "D"
    },
    {
        "question": "44. 在MySQL中，FROM子查询可以返回（）类型的结果。",
        "options": [
            "A、单行单列",
            "B、单行多列",
            "C、多行单列",
            "D、多行多列"
        ],
        "correct_answer": "D"
    },
    {
        "question": "45. FROM子查询必须给子查询结果起一个（ ）。",
        "options": [
            "A、别名",
            "B、索引",
            "C、主键",
            "D、外键"
        ],
        "correct_answer": "A"
    },
    {
        "question": "46. FROM子查询是指在（）子句中使用子查询作为数据源。",
        "options": [
            "A、SELECT",
            "B、FROM",
            "C、WHERE",
            "D、GROUP",
            "BY"
        ],
        "correct_answer": "B"
    },
    {
        "question": "47. 相关子查询的特点是（）。",
        "options": [
            "A、子查询的执行依赖于外部查询",
            "B、子查询的执行不依赖于外部查询",
            "C、子查询的结果可以作为外部查询的数据源",
            "D、子查询的结果可以作为外部查询的条件"
        ],
        "correct_answer": "A"
    },
    {
        "question": "48. 在SQL语句中，子查询的作用是（）。",
        "options": [
            "A、选取单表中字段子集的查询语句",
            "B、选取多表中子集的查询语句",
            "C、返回单表中数据子集的查询语句",
            "D、嵌入到另一个查询语句之中的查询语句。"
        ],
        "correct_answer": "D"
    },
    {
        "question": "49. 相关子查询通常在（）子句中引用了外部查询的表。",
        "options": [
            "A、SELECT",
            "B、FROM",
            "C、WHERE",
            "D、GROUP",
            "BY"
        ],
        "correct_answer": "C"
    },
    {
        "question": "50. 使用 EXISTS关键字，判断子查询结果为空时，返回（ ）。",
        "options": [
            "A、true",
            "B、false",
            "C、1",
            "D、0"
        ],
        "correct_answer": "B"
    },
    {
        "question": "51. 只要子查询中至少返回一个值，则EXISTS语句的值就为（）。",
        "options": [
            "A、true",
            "B、false",
            "C、1",
            "D、0"
        ],
        "correct_answer": "A"
    },
    {
        "question": "52. 使用EXISTS语句可以测试集合是否为空，EXISTS语句通常与（）结合在一起使用。",
        "options": [
            "A、子查询",
            "B、FROM子句",
            "C、WHERE子句",
            "D、SELECT子句"
        ],
        "correct_answer": "A"
    },
    {
        "question": "53. Java语言中,集合类都位于（）包中。",
        "options": [
            "A、java.util",
            "B、java.lang",
            "C、java.array",
            "D、java.collections"
        ],
        "correct_answer": "A"
    },
    {
        "question": "54. List接口是Java集合框架中的一个重要组成部分，它继承自（）接口。",
        "options": [
            "A、Collection",
            "B、Iterable",
            "C、Set",
            "D、Map"
        ],
        "correct_answer": "A"
    },
    {
        "question": "55. ArrayList是List接口的一个实现类，它使用数组来存储元素，它的初始容量是（）。",
        "options": [
            "A、0",
            "B、1",
            "C、10",
            "D、16"
        ],
        "correct_answer": "C"
    },
    {
        "question": "56. ArrayList类的底层数据结构是（）。",
        "options": [
            "A、数组结构",
            "B、链表结构",
            "C、哈希表结构",
            "D、红黑树结构"
        ],
        "correct_answer": "A"
    },
    {
        "question": "57. ArrayList提供了一些用于操作数组元素的方法，其中（）方法可以将一个集合中的所有元素添加到ArrayList的末尾。",
        "options": [
            "A、addAll(Collection<?",
            "extends",
            "E>",
            "c)",
            "B、addAll(int",
            "index,",
            "Collection<?",
            "extends",
            "E>",
            "c)",
            "C、appendAll(Collection<?",
            "extends",
            "E>",
            "c)",
            "D、appendAll(Collection<?",
            "extends",
            "E>",
            "c)"
        ],
        "correct_answer": "A"
    },
    {
        "question": "58. LinkedList除了实现了List接口，还实现了（）两个接口。",
        "options": [
            "A、Queue和Deque",
            "B、Stack和Queue",
            "C、Set和Map",
            "D、Collection和Iterable"
        ],
        "correct_answer": "A"
    },
    {
        "question": "59. 在Java中，用于创建链表数据结构的对象的类是（）。",
        "options": [
            "A、LinkedList",
            "B、ArrayList",
            "C、Collection",
            "D、HashMap"
        ],
        "correct_answer": "A"
    },
    {
        "question": "60. LinkedList提供了一些用于操作链表元素的方法，其中（）方法可以将一个元素插入到链表的头部。",
        "options": [
            "A、addFirst(E",
            "e)",
            "B、addLast(E",
            "e)",
            "C、push(E",
            "e)",
            "D、pop(E",
            "e)"
        ],
        "correct_answer": "A"
    },
    {
        "question": "61. 使用Iterator时,（）方法是用来判断是否存在下一个元素。",
        "options": [
            "A、hasNext()",
            "B、hash()",
            "C、hasPrevious()",
            "D、next()"
        ],
        "correct_answer": "A"
    },
    {
        "question": "62. Iterator接口是Java集合框架中的一个重要组成部分，它用于遍历集合中的元素，它有（ ）两个基本方法。",
        "options": [
            "A、next()和hasNext()",
            "B、get()和set()",
            "C、add()和remove()",
            "D、find()和replace()"
        ],
        "correct_answer": "A"
    },
    {
        "question": "63. Iterator接口有一个扩展接口ListIterator，它可以遍历List接口的实现类，它有（）额外的方法可以实现双向遍历。",
        "options": [
            "A、previous()",
            "B、backward()",
            "C、reverse()",
            "D、back()"
        ],
        "correct_answer": "A"
    },
    {
        "question": "64. Set接口是Java集合框架中的一个重要组成部分，它用于存储不重复的元素，它继承自（）接口。",
        "options": [
            "A、Iterable",
            "B、Collection",
            "C、List",
            "D、Map"
        ],
        "correct_answer": "B"
    },
    {
        "question": "65. Set接口有多种实现类，其中（）实现类是基于哈希表的，可以保证元素的插入顺序。",
        "options": [
            "A、HashSet",
            "B、LinkedHashSet",
            "C、TreeSet",
            "D、EnumSet"
        ],
        "correct_answer": "B"
    },
    {
        "question": "66. 要想在集合中保存没有重复的元素并且按照一定的顺序排序，可以使用（）集合。",
        "options": [
            "A、LinkedList",
            "B、ArrayList",
            "C、HashSet",
            "D、TreeSet"
        ],
        "correct_answer": "D"
    },
    {
        "question": "67. 下列集合中的核心接口中，用于存储一组键值对象,提供键到值的映射的是（）",
        "options": [
            "A、Collection",
            "B、List",
            "C、Set",
            "D、Map"
        ],
        "correct_answer": "D"
    },
    {
        "question": "68. HashMap是（ ）。",
        "options": [
            "A、一种数据结构",
            "B、一种算法",
            "C、一种编程语言",
            "D、一种操作系统"
        ],
        "correct_answer": "A"
    },
    {
        "question": "69. HashMap的底层实现的数据结构是（）。",
        "options": [
            "A、数组",
            "B、链表",
            "C、树",
            "D、数组+链表/红黑树"
        ],
        "correct_answer": "D"
    },
    {
        "question": "70. Java泛型的本质是（）。",
        "options": [
            "A、参数化类型",
            "B、多态类型",
            "C、抽象类型",
            "D、动态类型"
        ],
        "correct_answer": "A"
    },
    {
        "question": "71. 在泛型方法中，类型参数声明部分放在（）。",
        "options": [
            "A、方法返回类型之前",
            "B、方法返回类型之后",
            "C、方法参数列表之前",
            "D、方法参数列表之后"
        ],
        "correct_answer": "A"
    },
    {
        "question": "72. Java泛型中的通配符?表示（）。",
        "options": [
            "A、任意类型",
            "B、不确定的类型",
            "C、空类型",
            "D、基本类型"
        ],
        "correct_answer": "B"
    },
    {
        "question": "73. 下面类或者接口中，（ ）不属于集合框架中的容器。",
        "options": [
            "A、java.util.Collections",
            "B、java.util.Map",
            "C、java.util.Vector",
            "D、java.util.Hashtable"
        ],
        "correct_answer": "A"
    },
    {
        "question": "74. Map接口有多种实现类，其中（）实现类是基于哈希表的，可以保证键值对的插入顺序。",
        "options": [
            "A、HashMap",
            "B、LinkedHashMap",
            "C、TreeMap",
            "D、EnumMap"
        ],
        "correct_answer": "B"
    },
    {
        "question": "75. Map接口提供了一些用于操作映射关系的方法，其中（）方法可以返回一个包含所有键的Set视图。",
        "options": [
            "A、keySet()",
            "B、values()",
            "C、entrySet()",
            "D、keys()"
        ],
        "correct_answer": "A"
    },
    {
        "question": "76. Java输入、输出流相关的接口和类都位于（）包中。",
        "options": [
            "A、java.util",
            "B、java.io",
            "C、java.lang",
            "D、java.sql"
        ],
        "correct_answer": "B"
    },
    {
        "question": "77. Java的IO是（）。",
        "options": [
            "A、一种抽象的数据结构，可以表示任何形式的数据",
            "B、一种特殊的变量，可以存储任何类型的值",
            "C、一种动态的数据源，可以根据需要生成或消耗数据",
            "D、一种顺序的数据通道，可以按照一定的规则读取或写入数据"
        ],
        "correct_answer": "D"
    },
    {
        "question": "78. Java的IO概念是指（ ）",
        "options": [
            "A、Java的输入输出概念，是指Java程序与外部设备或数据源之间的数据交换",
            "B、Java的内外概念，是指Java程序内部和外部的数据结构和算法",
            "C、Java的进出概念，是指Java程序的执行流程和控制逻辑",
            "D、Java的上下概念，是指Java程序的层次结构和模块化设计"
        ],
        "correct_answer": "A"
    },
    {
        "question": "79. 在Java的File类常用方法中，（）方法是用来用来判断File对象对应的文件或目录是否是绝对路径。",
        "options": [
            "A、booleancanWrite()",
            "B、booleanisAbsolute()",
            "C、booleanisFile()",
            "D、booleanisDirectory()"
        ],
        "correct_answer": "B"
    },
    {
        "question": "80. File类的listFiles()方法的返回值是（）类型。",
        "options": [
            "A、String[]",
            "B、File[]",
            "C、List<String>",
            "D、List<File>"
        ],
        "correct_answer": "B"
    },
    {
        "question": "81. File类的createNewFile()方法的作用是（）。",
        "options": [
            "A、创建一个新的文件，如果文件已存在，则返回false",
            "B、创建一个新的文件，如果文件已存在，则覆盖原文件",
            "C、创建一个新的文件，如果文件已存在，则抛出异常",
            "D、创建一个新的文件，如果文件已存在，则不做任何操作"
        ],
        "correct_answer": "A"
    },
    {
        "question": "82. 字节流的基类是（）两个类。",
        "options": [
            "A、InputStream和OutputStream",
            "B、Reader和Writer",
            "C、FileInputStream和FileOutputStream",
            "D、FileReader和FileWriter"
        ],
        "correct_answer": "A"
    },
    {
        "question": "83. 在OutputStream类的常用方法中，向输出流写入一个字节的是（ ）方法。",
        "options": [
            "A、void",
            "flush()",
            "B、void",
            "close()",
            "C、void",
            "write(int",
            "b)",
            "D、void",
            "write(byte[]",
            "b)"
        ],
        "correct_answer": "C"
    },
    {
        "question": "84. Java中FileInputStream类的父类是（）。",
        "options": [
            "A、File",
            "B、FileOutput",
            "C、OutputStream",
            "D、InputStream"
        ],
        "correct_answer": "D"
    },
    {
        "question": "85. 字符流的基类是（）两个类。",
        "options": [
            "A、InputStream和OutputStream",
            "B、Reader和Writer",
            "C、FileInputStream和FileOutputStream",
            "D、FileReader和FileWriter"
        ],
        "correct_answer": "B"
    },
    {
        "question": "86. FileReader和FileWriter的构造方法有（）参数。",
        "options": [
            "A、File对象，String对象，boolean值",
            "B、File对象，String对象，int值",
            "C、File对象，char[]数组，boolean值",
            "D、File对象，char[]数组，int值"
        ],
        "correct_answer": "A"
    },
    {
        "question": "87. FileReader和FileWriter是（）类型的流。",
        "options": [
            "A、字节流",
            "B、字符流",
            "C、转换流",
            "D、缓冲流"
        ],
        "correct_answer": "B"
    },
    {
        "question": "88. BufferedWriter是（）类型的流。",
        "options": [
            "A、字节流",
            "B、字符流",
            "C、转换流",
            "D、缓冲流"
        ],
        "correct_answer": "D"
    },
    {
        "question": "89. BufferedReader有（）特有的方法",
        "options": [
            "A、readLine()和markSupported()",
            "B、readLine()和mark(int",
            "readAheadLimit)",
            "C、readLine()和reset()",
            "D、readLine()和skip(long",
            "n)"
        ],
        "correct_answer": "B"
    },
    {
        "question": "90. BufferedWriter有（）特有的方法。",
        "options": [
            "A、writeLine()和markSupported()",
            "B、writeLine()和mark(int",
            "readAheadLimit)",
            "C、writeLine()和reset()",
            "D、writeLine()和flush()"
        ],
        "correct_answer": "D"
    },
    {
        "question": "91. I/O异常的常见子类有（）。",
        "options": [
            "A、FileNotFoundException,",
            "EOFException,",
            "SocketException",
            "B、FileNotFoundException,",
            "EOFException,",
            "NullPointerException",
            "C、FileNotFoundException,",
            "ArithmeticException,",
            "SocketException",
            "D、FileNotFoundException,",
            "ArithmeticException,",
            "NullPointerException"
        ],
        "correct_answer": "A"
    },
    {
        "question": "92. 在异常处理时,进行释放资源、关闭文件等操作需要的语句是（）。",
        "options": [
            "A、try",
            "B、catch",
            "C、finally",
            "D、throw"
        ],
        "correct_answer": "C"
    },
    {
        "question": "93. I/O异常的基类是（ ）类。",
        "options": [
            "A、",
            "Exception",
            "B、",
            "IOException",
            "C、",
            "RuntimeException",
            "D、",
            "Error"
        ],
        "correct_answer": "B"
    },
    {
        "question": "94. 进程和线程的区别是（）。",
        "options": [
            "A、进程是程序的执行，线程是进程的分支",
            "B、进程是程序的执行，线程是程序的最小单位",
            "C、进程是程序的最小单位，线程是进程的执行",
            "D、进程是程序的最小单位，线程是进程的分支"
        ],
        "correct_answer": "A"
    },
    {
        "question": "95. 在Java中，创建线程的两种常见方式是（）",
        "options": [
            "A、实现Runnable接口和扩展Thread类",
            "B、实现Thread类和扩展Runnable接口",
            "C、实现Runnable接口和使用匿名内部类",
            "D、实现Thread类和使用匿名内部类"
        ],
        "correct_answer": "A"
    },
    {
        "question": "96. java中控制线程的状态的方法有（ ）。",
        "options": [
            "A、",
            "start(),",
            "stop(),",
            "sleep(),",
            "wait(),",
            "notify()",
            "B、",
            "start(),",
            "stop(),",
            "sleep(),",
            "suspend(),",
            "resume()",
            "C、",
            "start(),",
            "run(),",
            "sleep(),",
            "join(),",
            "yield()",
            "D、",
            "start(),",
            "run(),",
            "sleep(),",
            "wait(),",
            "notify()"
        ],
        "correct_answer": "C"
    },
    {
        "question": "97. 使用继承Thread类的方式创建线程时，必须重写（）方法。",
        "options": [
            "A、start()",
            "B、run()",
            "C、call()",
            "D、main()"
        ],
        "correct_answer": "B"
    },
    {
        "question": "98. 使用实现Callable接口的方式创建线程时，必须实现（）方法。",
        "options": [
            "A、start()",
            "B、run()",
            "C、call()",
            "D、main()"
        ],
        "correct_answer": "C"
    },
    {
        "question": "99. 使用实现Runnable接口的方式创建线程时，必须实现（）方法。",
        "options": [
            "A、start()",
            "B、run()",
            "C、call()",
            "D、main()"
        ],
        "correct_answer": "B"
    },
    {
        "question": "100. 运行状态的线程调用（）方法后会进入等待状态。",
        "options": [
            "A、sleep()",
            "B、wait()",
            "C、join()",
            "D、yield()"
        ],
        "correct_answer": "B"
    }
]