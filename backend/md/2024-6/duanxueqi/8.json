[
    {
        "question": "1. 新建状态的线程调用（）方法后会进入就绪状态。",
        "options": [
            "A、start()",
            "B、run()",
            "C、resume()",
            "D、notify()"
        ],
        "correct_answer": "A"
    },
    {
        "question": "2. 等待状态的线程调用（ ）方法后会进入就绪状态。",
        "options": [
            "A、",
            "start()",
            "B、",
            "run()",
            "C、",
            "resume()",
            "D、",
            "notify()"
        ],
        "correct_answer": "D"
    },
    {
        "question": "3. Java语言中提供了一个（）线程，自动回收动态分配的内存。",
        "options": [
            "A、异步",
            "B、消费者",
            "C、守护",
            "D、垃圾收集"
        ],
        "correct_answer": "D"
    },
    {
        "question": "4. Java的线程优先级的默认值是（）。",
        "options": [
            "A、MIN_PRIORITY",
            "B、NORM_PRIORITY",
            "C、MAX_PRIORITY",
            "D、MED_PRIORITY"
        ],
        "correct_answer": "B"
    },
    {
        "question": "5. Java的线程调度是基于（）机制的。",
        "options": [
            "A、时间片轮转",
            "B、抢占式",
            "C、优先级",
            "D、公平"
        ],
        "correct_answer": "C"
    },
    {
        "question": "6. Java的线程优先级可以用（ ）方法设置。",
        "options": [
            "A、",
            "setPriority(int",
            "newPriority)",
            "B、",
            "setLevel(int",
            "newLevel)",
            "C、",
            "setOrder(int",
            "newOrder)",
            "D、",
            "setRank(int",
            "newRank)"
        ],
        "correct_answer": "A"
    },
    {
        "question": "7. 下列锁机机制中，（）不能保证线程安全。",
        "options": [
            "A、Lock",
            "B、Synchronized",
            "C、Volatile",
            "D、ReentrantLock"
        ],
        "correct_answer": "C"
    },
    {
        "question": "8. Java的线程优先级可以用（）方法获取。",
        "options": [
            "A、getPriority()",
            "B、getLevel()",
            "C、getOrder()",
            "D、getRank()"
        ],
        "correct_answer": "A"
    },
    {
        "question": "9. 线程同步的目的是（）。",
        "options": [
            "A、提高线程的执行效率",
            "B、避免线程的死锁",
            "C、保证线程的安全性",
            "D、增加线程的交互性"
        ],
        "correct_answer": "C"
    },
    {
        "question": "10. synchronized关键字可以修饰（ ）元素。",
        "options": [
            "A、",
            "方法，代码块，变量，类",
            "B、",
            "方法，代码块，变量，对象",
            "C、",
            "方法，代码块，类，对象",
            "D、",
            "方法，代码块，类，接口"
        ],
        "correct_answer": "C"
    },
    {
        "question": "11. wait()和notify()方法属于（）类。",
        "options": [
            "A、Thread",
            "B、Object",
            "C、Runnable",
            "D、Callable"
        ],
        "correct_answer": "B"
    },
    {
        "question": "12. JDBC中负责驱动管理的是（ ）。",
        "options": [
            "A、DriverManager",
            "B、Connection",
            "C、Statement",
            "D、RseultSet"
        ],
        "correct_answer": "A"
    },
    {
        "question": "13. JDBC驱动程序是（）。",
        "options": [
            "A、一种用于连接数据库的API",
            "B、一种用于实现JDBC接口的类库",
            "C、一种用于转换数据格式的工具",
            "D、一种用于管理数据库的软件"
        ],
        "correct_answer": "B"
    },
    {
        "question": "14. 所有JDBC驱动程序必须实现的接口是（）。",
        "options": [
            "A、Driver接口",
            "B、Statement接口",
            "C、PreparedStatement接口",
            "D、ResultSet接口"
        ],
        "correct_answer": "A"
    },
    {
        "question": "15. JDBC提供了一系列访问数据库的接口和类，其中（ ）用于加载JDBC驱动并创建与数据库的连接。",
        "options": [
            "A、",
            "ResultSet接口",
            "B、",
            "Statement接口",
            "C、",
            "Connection接口",
            "D、",
            "DriverManager类"
        ],
        "correct_answer": "D"
    },
    {
        "question": "16. JDBC是（ ）的缩写。",
        "options": [
            "A、",
            "Java",
            "Database",
            "Connectivity",
            "B、",
            "Java",
            "Data",
            "Communication",
            "C、",
            "Java",
            "Database",
            "Component",
            "D、",
            "Java",
            "Data",
            "Conversion"
        ],
        "correct_answer": "A"
    },
    {
        "question": "17. （）不是JDBC驱动程序。",
        "options": [
            "A、JDBC-ODBC桥驱动程序",
            "B、本地",
            "API驱动程序",
            "C、网络互联驱动程序",
            "D、本地协议驱动程序"
        ],
        "correct_answer": "C"
    },
    {
        "question": "18. JDBC API使用（）驱动程序来连接数据库。",
        "options": [
            "A、ODBC驱动程序",
            "B、JDBC驱动程序",
            "C、SQL驱动程序",
            "D、DBMS驱动程序"
        ],
        "correct_answer": "B"
    },
    {
        "question": "19. JDBC API主要位于（）包中。",
        "options": [
            "A、java.sql",
            "B、javax.swing",
            "C、java.util",
            "D、java.awt"
        ],
        "correct_answer": "A"
    },
    {
        "question": "20. JDBC API中，（）用来执行SQL语句。",
        "options": [
            "A、ResultSet接口",
            "B、Statement接口",
            "C、Connection接口",
            "D、DriverManager类"
        ],
        "correct_answer": "B"
    },
    {
        "question": "21. PreparedStatement对象是通过（）方法创建的。",
        "options": [
            "A、Connection.createStatement()",
            "B、Connection.prepareStatement()",
            "C、Connection.executeStatement()",
            "D、Connection.createPreparedStatement()"
        ],
        "correct_answer": "B"
    },
    {
        "question": "22. PreparedStatement对象可以用来执行（）类型的SQL语句。",
        "options": [
            "A、任何类型的SQL语句",
            "B、只有查询语句",
            "C、只有更新语句",
            "D、带有参数的SQL语句"
        ],
        "correct_answer": "D"
    },
    {
        "question": "23. PreparedStatement接口是（ ）接口的子接口。",
        "options": [
            "A、",
            "Connection",
            "B、",
            "Statement",
            "C、",
            "ResultSet",
            "D、",
            "CallableStatement"
        ],
        "correct_answer": "B"
    },
    {
        "question": "24. JDBC执行SQL查询语句的结果放在ResultSet对象中，调用方法（ ）可将指针从当前位置向下移动一行。",
        "options": [
            "A、last",
            "B、getDate",
            "C、getInt",
            "D、next"
        ],
        "correct_answer": "D"
    },
    {
        "question": "25. ResultSet对象是用来存储（）类型的数据的。",
        "options": [
            "A、数据库表的数据",
            "B、SQL语句的数据",
            "C、数据库查询的结果集",
            "D、数据库连接的信息"
        ],
        "correct_answer": "C"
    },
    {
        "question": "26. ResultSet对象维护了一个指向当前行的（）。",
        "options": [
            "A、游标",
            "B、索引",
            "C、指针",
            "D、引用"
        ],
        "correct_answer": "A"
    },
    {
        "question": "27. 在JDBC操作中，用于将参数化的SQL语句发送到数据库的方法是（ ）。",
        "options": [
            "A、prepareCall(Stringsql)",
            "B、prepareStatement(Stringsql)",
            "C、registerDriver(Driverdriver)",
            "D、createStatement()"
        ],
        "correct_answer": "B"
    },
    {
        "question": "28. 接口Statement中定义的executeUpdate方法的返回类型是（）。",
        "options": [
            "A、ResultSet",
            "B、int",
            "C、boolean",
            "D、double"
        ],
        "correct_answer": "B"
    },
    {
        "question": "29. 接口Statement中定义的execute方法的返回类型是（ ）。",
        "options": [
            "A、",
            "ResultSet",
            "B、",
            "int",
            "C、",
            "boolean",
            "D、",
            "double"
        ],
        "correct_answer": "C"
    },
    {
        "question": "30. executeQuery(Stringsql)用于执行SQL中的select语句返回值类型（）。",
        "options": [
            "A、String",
            "B、int",
            "C、ResultSet",
            "D、char[]"
        ],
        "correct_answer": "C"
    },
    {
        "question": "31. 可以获取结果集（ResultSet）的元数据的方法是（）。",
        "options": [
            "A、Connection的getMetaData方法",
            "B、ResultSet的getMetaData方法",
            "C、Connection的getResultMetaData方法",
            "D、ResultSet的getResultMetaData方法"
        ],
        "correct_answer": "B"
    },
    {
        "question": "32. 在ResultSet接口内部有一个指向表格数据行的游标（或指针），ResultSet对象初始化时，游标在表格的第一行之前，调用（ ）方法可将游标移动到下一行。",
        "options": [
            "A、before()",
            "B、after()",
            "C、next()",
            "D、last()"
        ],
        "correct_answer": "C"
    },
    {
        "question": "33. 网络中计算机连接和通信时遵守的规则称为（ ）。",
        "options": [
            "A、语法",
            "B、语义",
            "C、时序",
            "D、协议"
        ],
        "correct_answer": "D"
    },
    {
        "question": "34. 在Java中，通过（）类可以用来创建一个URL对象。",
        "options": [
            "A、java.net.URL",
            "B、java.net.URI",
            "C、java.net.URLEncoder",
            "D、java.net.URLConnection"
        ],
        "correct_answer": "A"
    },
    {
        "question": "35. （）是C类IP地址。",
        "options": [
            "A、127.233.13.34",
            "B、152.87.209.51",
            "C、169.196.30.54",
            "D、202.96.209.21"
        ],
        "correct_answer": "D"
    },
    {
        "question": "36. 在网络协议中，面向连接的的协议是（）。",
        "options": [
            "A、传输控制协议",
            "B、用户数据报协议",
            "C、网际协议",
            "D、网际控制报文协议"
        ],
        "correct_answer": "A"
    },
    {
        "question": "37. 在Java的InetAddress类中，获取本对象的IP地址,并存放在字节数组中的方法是（ ）。",
        "options": [
            "A、InetAddress",
            "getLocalHost()",
            "B、byte[]",
            "getAddress()",
            "C、String",
            "getHostAddress()",
            "D、String",
            "getHostName()"
        ],
        "correct_answer": "B"
    },
    {
        "question": "38. InetAddress类中（）方法可实现正向名称解析。",
        "options": [
            "A、isReachable（）",
            "B、getHostAddress（）",
            "C、getHosstName（）",
            "D、getByName（）"
        ],
        "correct_answer": "B"
    },
    {
        "question": "39. 在Socket类的常用方法中，用于获取创建Socket对象时指定的服务器的IP地址的是（）。",
        "options": [
            "A、InetAddress",
            "getLocalAddress()",
            "B、intget",
            "Port()",
            "C、InetAddress",
            "getInetAddress()",
            "D、InputStream",
            "getInputStream()"
        ],
        "correct_answer": "C"
    },
    {
        "question": "40. Java Socket编程中，客户端要连接服务器端，需要使用（）类的对象。",
        "options": [
            "A、Socket",
            "B、ServerSocket",
            "C、InetAddress",
            "D、URL"
        ],
        "correct_answer": "A"
    },
    {
        "question": "41. Java ServerSocket的监听方法accept( )方法的返回值类型是（）。",
        "options": [
            "A、Socket",
            "B、void",
            "C、Object",
            "D、DatagramSocket"
        ],
        "correct_answer": "A"
    },
    {
        "question": "42. 使用Java进行TCP编程时，双方通过Socket打开输入输出流读写数据，我们通过（）方法可以从Socket对象获取输入流。",
        "options": [
            "A、getInputStream()",
            "B、getOutputStream()",
            "C、getReader()",
            "D、getWriter()"
        ],
        "correct_answer": "A"
    },
    {
        "question": "43. 在开发基于TCP的SOCKET通讯模块时，一般需要编写服务端和（ ）模块。",
        "options": [
            "A、客户端",
            "B、配置文件",
            "C、TCP",
            "D、SOCKET"
        ],
        "correct_answer": "A"
    },
    {
        "question": "44. 在开发基于TCP的SOCKET通讯模块时，一般会用（）方法绑定把套接字。",
        "options": [
            "A、add",
            "B、bind",
            "C、set",
            "D、binding"
        ],
        "correct_answer": "B"
    },
    {
        "question": "45. 通过ServerSocket对象中的（ ）方法可以用于接收来自客户端的请求。",
        "options": [
            "A、accept()",
            "B、getOutputStream()",
            "C、receive()",
            "D、get()"
        ],
        "correct_answer": "A"
    },
    {
        "question": "46. 在ServerSocket类的构造方法中，以端口port创建ServerSocket对象,并等待客户端的连接请求的是（）。",
        "options": [
            "A、ServerSocket(int",
            "port)",
            "B、ServerSocket()",
            "C、ServerSocket(int",
            "port,int",
            "backlog)",
            "D、ServerSocket(int",
            "port,int",
            "backlog,",
            "InetAddress",
            "bindAddr)"
        ],
        "correct_answer": "A"
    },
    {
        "question": "47. 在用Java语言开发基于Socket的通讯程序时，在完成通讯后，应当在服务端和客户端调用套接字的（）方法来关闭套接字。",
        "options": [
            "A、close",
            "B、clear",
            "C、delete",
            "D、free"
        ],
        "correct_answer": "A"
    },
    {
        "question": "48. 套接字的类型包括流套接字、数据报文套接字和（ ）。",
        "options": [
            "A、操作报文套接字",
            "B、操作系统套接字",
            "C、协议套接字",
            "D、原始套接字"
        ],
        "correct_answer": "D"
    },
    {
        "question": "49. Socket是（）。",
        "options": [
            "A、一种网络协议",
            "B、一种网络设备",
            "C、一种网络通信的端点",
            "D、一种网络通信的方式"
        ],
        "correct_answer": "C"
    },
    {
        "question": "50. 不属于Socket的类型的是（）。",
        "options": [
            "A、流式套接字",
            "B、数据报套接字",
            "C、原始套接字",
            "D、网络套接字"
        ],
        "correct_answer": "D"
    },
    {
        "question": "51. TCP和UDP的传输方式分别是（ ）。",
        "options": [
            "A、流式传输，报文传输",
            "B、报文传输，流式传输",
            "C、流式传输，流式传输",
            "D、报文传输，报文传输"
        ],
        "correct_answer": "A"
    },
    {
        "question": "52. TCP和UDP的首部长度分别是（）字节。",
        "options": [
            "A、20，8",
            "B、8，20",
            "C、16，8",
            "D、8，16"
        ],
        "correct_answer": "A"
    },
    {
        "question": "53. TCP和UDP分别属于TCP/IP协议簇中的（ ）层。",
        "options": [
            "A、应用层，传输层",
            "B、传输层，应用层",
            "C、传输层，传输层",
            "D、应用层，应用层"
        ],
        "correct_answer": "C"
    },
    {
        "question": "54. 使用流式套接字编程时，为了向对方发送数据，则需要使用（）方法。",
        "options": [
            "A、getInetAddress()",
            "B、getLocalPort()",
            "C、getOutputStream()",
            "D、getInputStream()"
        ],
        "correct_answer": "C"
    },
    {
        "question": "55. 使用UDP协议通信时，需要使用（）类把要发送的数据打包，并且用该类对象接收数据。",
        "options": [
            "A、Socket",
            "B、DatagramSocket",
            "C、DatagramPacket",
            "D、ServerSocket"
        ],
        "correct_answer": "C"
    },
    {
        "question": "56. Java语言支持网络通信的软件都在（）包中。",
        "options": [
            "A、java.lang.net",
            "B、java.net",
            "C、java.net.ftp",
            "D、java.net.www"
        ],
        "correct_answer": "B"
    },
    {
        "question": "57. 在Java中，DatagramPacket类用来表示（）。",
        "options": [
            "A、数据报包",
            "B、数据流",
            "C、数据帧",
            "D、数据段"
        ],
        "correct_answer": "A"
    },
    {
        "question": "58. 在Java中，DatagramPacket类的getAddress()方法作用是（ ）。",
        "options": [
            "A、返回数据报包的数据",
            "B、返回数据报包的长度",
            "C、返回数据报包的目标地址",
            "D、返回数据报包的源地址"
        ],
        "correct_answer": "C"
    },
    {
        "question": "59. 在Java中进行UDP通信时，在接收端若要获得发送端的IP地址，可以使用DatagramPacket的（）方法。",
        "options": [
            "A、getAddress()",
            "B、getPort()",
            "C、getName()",
            "D、getData()"
        ],
        "correct_answer": "A"
    },
    {
        "question": "60. 在DatagramSocket类的常用方法中，（）方法用于发送 DatagramPacket数据报,将数据报中包含的报文发送到p指定的IP地址的主机。",
        "options": [
            "A、void",
            "receive(DatagramPacket",
            "p)",
            "B、void",
            "setTimeout(int",
            "timeout)",
            "C、void",
            "send(DatagramPacket",
            "packet)",
            "D、void",
            "close()"
        ],
        "correct_answer": "C"
    },
    {
        "question": "61. 使用UDP协议进行通信，在程序运行时，DatagramSocket的（ ）方法会发生阻塞。",
        "options": [
            "A、send()",
            "B、receive()",
            "C、close()",
            "D、connect()"
        ],
        "correct_answer": "B"
    },
    {
        "question": "62. 在Java中使⽤（）类建⽴⼀个socket，⽤于不可靠的数据报的传输。",
        "options": [
            "A、Applet",
            "B、DatagramSocket",
            "C、InetAddress",
            "D、AppletContext"
        ],
        "correct_answer": "B"
    },
    {
        "question": "63. 在TCP/IP模型中，应用层包含了所有的高层协议，在下列的一些应用协议中，能够实现本地与远程主机之间的文件传输工作的是（）",
        "options": [
            "A、telnet",
            "B、FTP",
            "C、SNMP",
            "D、NFS"
        ],
        "correct_answer": "B"
    },
    {
        "question": "64. TCP/IP通讯协议采用了4层的层级结构，其中包括应用层、传输层、网络层和（）。",
        "options": [
            "A、表示层",
            "B、会话层",
            "C、数据链路层",
            "D、网络接口层"
        ],
        "correct_answer": "D"
    },
    {
        "question": "65. TCP/IP应用层的协议包括：TFTP、（）、SNMP、FTP、SMTP、DNS、Telnet等。",
        "options": [
            "A、HTTP",
            "B、TCP",
            "C、UDP",
            "D、IP"
        ],
        "correct_answer": "A"
    },
    {
        "question": "66. 在Java中，使用Socket对象进行TCP通信时，可以通过（ ）方法获取一个输出流，用于向对方发送数据",
        "options": [
            "A、getOutputStream()",
            "B、getInputStream()",
            "C、getWriter()",
            "D、getOutput()"
        ],
        "correct_answer": "A"
    },
    {
        "question": "67. 在Java中，使用Socket类创建客户端对象时，需要传入服务器端的（）。",
        "options": [
            "A、IP地址，端口号",
            "B、域名，端口号",
            "C、IP地址，协议",
            "D、域名，协议"
        ],
        "correct_answer": "A"
    },
    {
        "question": "68. 在TCP/IP 网络中，为各种公共服务和系统保留的端口号范围是（）",
        "options": [
            "A、0~65525",
            "B、0~1024",
            "C、0~1023",
            "D、0~80"
        ],
        "correct_answer": "C"
    },
    {
        "question": "69. Java死锁产生的四个必要条件是（）。",
        "options": [
            "A、互斥使用、不可抢占、请求和保持、循环等待",
            "B、互斥使用、可抢占、请求和保持、循环等待",
            "C、互斥使用、不可抢占、请求和释放、循环等待",
            "D、互斥使用、不可抢占、请求和保持、线性等待"
        ],
        "correct_answer": "A"
    },
    {
        "question": "70. 使用（）命令来检测Java程序中是否存在死锁。",
        "options": [
            "A、jstack",
            "B、jmap",
            "C、jstat",
            "D、jconsole"
        ],
        "correct_answer": "D"
    },
    {
        "question": "71. 避免死锁的一个常用方法是（ ）。",
        "options": [
            "A、使用多个线程",
            "B、使用多个锁",
            "C、使用同步代码块",
            "D、使用相同的锁顺序"
        ],
        "correct_answer": "D"
    },
    {
        "question": "72. 软件（）以及软件向各个结点的部署的工作被称为软件部署。",
        "options": [
            "A、运行环境配置",
            "B、功能开发",
            "C、功能测试",
            "D、项目验收"
        ],
        "correct_answer": "A"
    },
    {
        "question": "73. 软件部署是一个复杂过程，包括从开发商发放产品，到应用者在他们的计算机上实际安装并维护应用的所有活动。这些活动包括开发商的软件打包，企业及用户对软件的安装、（）等。",
        "options": [
            "A、修订、集成和验收",
            "B、配置、修订和验收",
            "C、配置、集成和更新",
            "D、调试、修订和更新"
        ],
        "correct_answer": "C"
    },
    {
        "question": "74. 软件部署存在着风险，一般由以下原因造成的：应用软件越来越复杂，包括许多构件、版本和变种；应用发展很快，相继两个版本的间隔很短；（）；构件的来源多样性等。",
        "options": [
            "A、开发的不确定性",
            "B、测试的不确定性",
            "C、用户的不确定性",
            "D、环境的不确定性"
        ],
        "correct_answer": "D"
    },
    {
        "question": "75. 软件部署过程的主要特征有：过程覆盖度、（）和模型抽象。",
        "options": [
            "A、过程可变更性、过程间协调",
            "B、功能完成度、性能效率",
            "C、功能完成度、过程间协调",
            "D、过程可变更性、性能效率"
        ],
        "correct_answer": "A"
    },
    {
        "question": "76. 抽象的软件部署模型，用于有效地指导部署过程，包括（ ）、企业模型、站点模型、策略模型和部署模型。",
        "options": [
            "A、设计模型、开发模型",
            "B、应用模型、产品模型",
            "C、设计模型、产品模型",
            "D、应用模型、开发模型"
        ],
        "correct_answer": "B"
    },
    {
        "question": "77. 企业级软件部署一般可以通过组策略来为域内的用户与计算机部署软件，此类软件的部署分为（）两种。",
        "options": [
            "A、分布与调试",
            "B、配置与安装",
            "C、指派与发布",
            "D、安装与调试"
        ],
        "correct_answer": "C"
    },
    {
        "question": "78. 通过组策略来为域内部署企业级软件主要包括：将软件指派给用户、将软件指派给计算机、将软件发布给用户、（）。",
        "options": [
            "A、将软件发布给计算机和更新软件",
            "B、将软件发布给计算机和自动修复软件",
            "C、将软件发布给计算机和删除软件",
            "D、自动修复软件和删除软件"
        ],
        "correct_answer": "D"
    },
    {
        "question": "79. 在软件产品部署过程中，（）环节通常包括对用户进行培训和提供技术支持。",
        "options": [
            "A、前期准备工作",
            "B、硬件和网络环境配置",
            "C、软件安装和配置",
            "D、后期运维和维护"
        ],
        "correct_answer": "D"
    },
    {
        "question": "80. （）架构可以理解为即将所需的主机资源集中到少数的机台大型服务器中。",
        "options": [
            "A、本地化",
            "B、集中式",
            "C、分布式",
            "D、混合式"
        ],
        "correct_answer": "B"
    },
    {
        "question": "81. 集群技术的目的包括提高性能、降低成本、提高可扩展性、 增强（）。",
        "options": [
            "A、先进性",
            "B、便捷性",
            "C、可靠性",
            "D、易维护性"
        ],
        "correct_answer": "C"
    },
    {
        "question": "82. （ ）架构的思想根基是根据业务功能、模块设计或者行政机构的不同，采用相对分散的中小型服务器。",
        "options": [
            "A、集中式",
            "B、本地化",
            "C、混合式",
            "D、分布式"
        ],
        "correct_answer": "D"
    },
    {
        "question": "83. 软件产品集中部署其实就是将所有的应用软件都部署在服务器，客户（），通过远程登录应用，保留和本地相同的体验。",
        "options": [
            "A、需安装客户端软件",
            "B、不安装任何应用软件",
            "C、需安装本地数据库",
            "D、需部署本地服务器"
        ],
        "correct_answer": "B"
    },
    {
        "question": "84. （）需要具有非常高的安全性，集中式部署可提供的硬件安全方案包括身份认证技术、防火墙、入侵防御系统等。",
        "options": [
            "A、集中式部署",
            "B、分布式部署",
            "C、混合式部署",
            "D、本地部署"
        ],
        "correct_answer": "A"
    },
    {
        "question": "85. （）是将所有的应用软件都部署在服务器,客户不用安装任何软件客户通过远程登录应用,保留和本地相同的体验,实现任何时间、任何地点、采用任何设备、任何网络实时应用。",
        "options": [
            "A、服务器",
            "B、客户端部署",
            "C、分布式部署",
            "D、集中式部署"
        ],
        "correct_answer": "D"
    },
    {
        "question": "86. 集中式部署的设计原则是先进性、（）、可靠性、灵活性。",
        "options": [
            "A、便捷性",
            "B、可移植性",
            "C、安全性",
            "D、稳定性"
        ],
        "correct_answer": "C"
    },
    {
        "question": "87. 集中式部署的系统，要同时满足多个单位不同需求，需要在格式、流程、表单、权限等设置上具有（）。",
        "options": [
            "A、先进性",
            "B、安全性",
            "C、可靠性",
            "D、灵活性"
        ],
        "correct_answer": "D"
    },
    {
        "question": "88. 由于系统一旦出现故障，将对整个系统的用户造成影响，要求系统具有很高的（ ），并有完整的应急措施，比如采用双机热备等。",
        "options": [
            "A、先进性",
            "B、安全性",
            "C、可靠性",
            "D、灵活性"
        ],
        "correct_answer": "C"
    },
    {
        "question": "89. 集中式部署方案的特点是（）、快速集中部署、维护方便。",
        "options": [
            "A、信息集中共享",
            "B、管理上独立",
            "C、访问速度快",
            "D、大容量、大负荷能力"
        ],
        "correct_answer": "A"
    },
    {
        "question": "90. 集中式部署方案的特点是信息集中共享、（）、维护方便。",
        "options": [
            "A、管理上独立",
            "B、快速集中部署",
            "C、访问速度快",
            "D、大容量、大负荷能力"
        ],
        "correct_answer": "B"
    },
    {
        "question": "91. （）所有用户共用同一套系统，各种信息和文档的共享变得非常方便，任何个人都可以通过授权方便地获得相关的信息。",
        "options": [
            "A、集中式部署",
            "B、分布式部署",
            "C、混合式部署",
            "D、本地部署"
        ],
        "correct_answer": "A"
    },
    {
        "question": "92. 软件产品集中式部署方案需要解决的关键技术是（）。",
        "options": [
            "A、高速度",
            "B、高可用",
            "C、高并发",
            "D、安全性"
        ],
        "correct_answer": "C"
    },
    {
        "question": "93. 提高集中式部署可靠性的技术是（）。",
        "options": [
            "A、身份认证技术",
            "B、双机热备",
            "C、RAID技术",
            "D、防火墙技术"
        ],
        "correct_answer": "B"
    },
    {
        "question": "94. （）的系统必须具有先进的技术架构及支撑大量用户访问的设计，包括大并发下的缓存技术、页面异步数据交换等互联网技术。",
        "options": [
            "A、服务器",
            "B、客户端部署",
            "C、分布式部署",
            "D、集中式部署"
        ],
        "correct_answer": "D"
    },
    {
        "question": "95. 软件产品分布式部署是将（ ）分散的存储于多台独立的机器设备上，采用可扩展的系统结构，利用多台存储服务器分担存储负荷，利用位置服务器定位存储信息，不但解决了传统集中式存储系统中单存储服务器的瓶颈问题，还提高了系统的可靠性、可用性和扩展性。",
        "options": [
            "A、数据",
            "B、应用软件",
            "C、镜像",
            "D、日志"
        ],
        "correct_answer": "A"
    },
    {
        "question": "96. （）不但解决了传统集中式存储系统中单存储服务器的瓶颈问题，还提高了系统的可靠性、可用性和扩展性。",
        "options": [
            "A、服务器",
            "B、客户端部署",
            "C、分布式部署",
            "D、集中式部署"
        ],
        "correct_answer": "C"
    },
    {
        "question": "97. 软件产品分布式部署在实施过程中可以很方便地实行（），降低实施风险，可分单位逐步进行部署，可以在各独立系统上线运行成功的基础上，最后部署交换中心即可。",
        "options": [
            "A、统一实施",
            "B、分步实施",
            "C、集中部署",
            "D、分布部署"
        ],
        "correct_answer": "B"
    },
    {
        "question": "98. 分布式部署的设计原则：（）、分布式交换、最小授权。",
        "options": [
            "A、先进性",
            "B、成熟性",
            "C、可靠性",
            "D、独立性"
        ],
        "correct_answer": "D"
    },
    {
        "question": "99. 采用（），每个单位都需要部署一套独立的硬件系统和软件系统，前期相对投入较大。",
        "options": [
            "A、服务器",
            "B、客户端部署",
            "C、分布式部署",
            "D、集中式部署"
        ],
        "correct_answer": "C"
    },
    {
        "question": "100. 分布式部署环境下，数据交换需要经过数据导出、（）、数据导入。",
        "options": [
            "A、数据上报",
            "B、数据分析",
            "C、数据传输",
            "D、数据下载"
        ],
        "correct_answer": "A"
    }
]