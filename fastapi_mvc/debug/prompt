my project sctructure is look like this:

musong@musong:~/Documents/record-web/fastapi_mvc$ tree
.
├── app
│   ├── controllers
│   │   ├── file_controller.py
│   │   ├── __pycache__
│   │   │   ├── file_controller.cpython-310.pyc
│   │   │   └── record_controller.cpython-310.pyc
│   │   └── record_controller.py
│   ├── main.py
│   ├── models
│   │   ├── file_model.py
│   │   ├── __pycache__
│   │   │   ├── file_model.cpython-310.pyc
│   │   │   └── record_model.cpython-310.pyc
│   │   ├── record.db
│   │   └── record_model.py
│   ├── __pycache__
│   │   └── main.cpython-310.pyc
│   └── views
│       ├── file_view.py
│       ├── __pycache__
│       │   ├── file_view.cpython-310.pyc
│       │   └── record_view.cpython-310.pyc
│       └── record_view.py
├── db
│   ├── database_file.py
│   ├── data.sqlite
│   └── __pycache__
│       ├── database.cpython-310.pyc
│       └── database_file.cpython-310.pyc
├── debug
│   ├── main.py
│   ├── prompt
│   └── __pycache__
│       └── main.cpython-310.pyc
├── file.db
├── record.db
├── run.py
└── tests
    └── file.txt

13 directories, 26 files

some important files is look like this

record_controller.py
# record_controller.py
from sqlalchemy.orm import Session
from app.models.record_model import Record, SessionLocal
from datetime import datetime

def create_record(data: str) -> dict:
    try:
        current_time = datetime.now().strftime('%Y-%m-%d %H:%M:%S')
        new_record = Record(data=data, time=current_time)
        session = SessionLocal()
        session.add(new_record)
        session.commit()
        session.close()
        return {"success": True, "message": "Data and time stored successfully!"}
    except Exception as e:
        return {"success": False, "message": f"An error occurred: {str(e)}"}

def get_last_ten_records() -> list:
    try:
        session = SessionLocal()
        records = session.query(Record).order_by(Record.id.desc()).limit(10).all()
        session.close()
        records_list = [{"id": record.id, "data": record.data, "time": record.time} for record in records]
        return records_list
    except Exception as e:
        return {"success": False, "message": f"An error occurred: {str(e)}"}

record_model.py
# record_model.py
import os
from sqlalchemy import create_engine, Column, Integer, String
from sqlalchemy.ext.declarative import declarative_base
from sqlalchemy.orm import sessionmaker

basedir = os.path.abspath(os.path.dirname(__file__))
DATABASE_URL = 'sqlite:///' + os.path.join(basedir, 'record.db')

engine = create_engine(DATABASE_URL, connect_args={"check_same_thread": False})
SessionLocal = sessionmaker(autocommit=False, autoflush=False, bind=engine)
Base = declarative_base()

class Record(Base):
    __tablename__ = 'record'
    id = Column(Integer, primary_key=True, index=True)
    data = Column(String, nullable=False)
    time = Column(String, nullable=False)

# Create tables
Base.metadata.create_all(bind=engine)

record_view.py
from fastapi import APIRouter, Query
from app.controllers.file_controller import FileController
from pydantic import BaseModel
from typing import List

router = APIRouter()

class Item(BaseModel):
    name: str
    type: str

class ItemList(BaseModel):
    items: List[Item]

@router.get("/list-files", response_model=ItemList)
def list_files(folder_path: str = Query(..., description="Path of the folder to list files from"), limit: int = Query(1000, description="Maximum number of files to list")):
    items = FileController.list_files(folder_path, limit)
    return {"items": items}

@router.get("/list-all-files-and-folders", response_model=ItemList)
def list_all_files_and_folders(folder_path: str = Query(..., description="Path of the folder to list all files and folders from"), limit: int = Query(1000, description="Maximum number of files and folders to list")):
    items = FileController.list_all_files_and_folders(folder_path, limit)
    return {"items": items}

@router.get("/read-file")
def read_file(file_path: str = Query(..., description="Path of the file to read")):
    content, views = FileController.read_file(file_path)
    return {"content": content, "views": views}


main.py 
from fastapi import FastAPI
from fastapi.middleware.cors import CORSMiddleware
from app.views import file_view, record_view

app = FastAPI()

app.add_middleware(
    CORSMiddleware,
    allow_origins=["*"], 
    allow_credentials=True,
    allow_methods=["*"],
    allow_headers=["*"],
)
app.include_router(file_view.router)
app.include_router(record_view.router)


run.py
import uvicorn
from app.main import app

if __name__ == "__main__":
    uvicorn.run(app, host="0.0.0.0", port=8000)


now can you help me figure out why
INFO:     127.0.0.1:56526 - "GET /records/server HTTP/1.1" 404 Not Found